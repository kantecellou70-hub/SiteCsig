# CSIG - Cit√© des Sciences et de l'Innovation de Guin√©e

## üìã Description du Projet

Le projet CSIG est une plateforme web compl√®te pour la gestion et la pr√©sentation de la Cit√© des Sciences et de l'Innovation de Guin√©e. Il comprend :

- **Site public** : Pr√©sentation des programmes, projets, √©v√©nements, √©quipe
- **Gestion de contenu** : Interface d'administration pour g√©rer tous les contenus
- **Syst√®me de r√©servation** : Gestion des salles de conf√©rence
- **Newsletter** : Syst√®me d'abonnement et de campagnes
- **Recherche avanc√©e** : Fonctionnalit√© de recherche dans tous les contenus

## üõ†Ô∏è Technologies Utilis√©es

- **Backend** : Django 5.2+ avec Python 3.9+
- **Base de donn√©es** : PostgreSQL (recommand√©) ou SQLite (d√©veloppement)
- **Cache** : Redis
- **Frontend** : Bootstrap 5, HTML5, CSS3, JavaScript
- **√âditeur de texte** : CKEditor5
- **T√¢ches asynchrones** : Celery

## üìã Pr√©requis

### Option 1 : Installation Manuelle

- **Python 3.11+**
- **PostgreSQL 12+** (ou SQLite pour le d√©veloppement)
- **Redis 6+**
- **Git**

### Option 2 : Installation avec Docker

- **Docker** et **Docker Compose**
- **Git**

## üöÄ Installation et Configuration

### 1. Cloner le Projet

```bash
git clone <url-du-repo>
cd csig
```

### 2. Cr√©er l'Environnement Virtuel

```bash
# Windows
python -m venv venv
venv\Scripts\activate

# Linux/Mac
python3 -m venv venv
source venv/bin/activate
```

### 3. Installer les D√©pendances

```bash
pip install -r requirements.txt
```

### 4. Configuration de la Base de Donn√©es

#### Option A : PostgreSQL (Recommand√© pour la production)

1. **Installer PostgreSQL** sur votre machine
2. **Cr√©er une base de donn√©es** :
   ```sql
   CREATE DATABASE csig_db;
   CREATE USER csig_user WITH PASSWORD 'votre_mot_de_passe';
   GRANT ALL PRIVILEGES ON DATABASE csig_db TO csig_user;
   ```

3. **Configurer les param√®tres** dans `csigwebsite/settings.py` :
   ```python
   DATABASES = {
       'default': {
           'ENGINE': 'django.db.backends.postgresql',
           'NAME': 'csig_db',
           'USER': 'csig_user',
           'PASSWORD': 'votre_mot_de_passe',
           'HOST': 'localhost',
           'PORT': '5432',
       }
   }
   ```

#### Option B : SQLite (Simple pour le d√©veloppement)

Modifier `csigwebsite/settings.py` :

```python
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
```

### 5. Configuration de Redis

#### Option A : Installation Manuelle

1. **Windows** :
   - T√©l√©charger Redis depuis [GitHub](https://github.com/microsoftarchive/redis/releases)
   - Ou utiliser WSL2 avec Ubuntu

2. **Linux/Mac** :
   ```bash
   # Ubuntu/Debian
   sudo apt-get install redis-server
   
   # macOS avec Homebrew
   brew install redis
   ```

3. **D√©marrer Redis** :
   ```bash
   redis-server
   ```

#### Option B : Docker (Recommand√©)

```bash
docker run -d --name redis-csig -p 6379:6379 redis:alpine
```

### 6. Configuration des Variables d'Environnement

Cr√©er un fichier `.env` √† la racine du projet :

```env
# Base de donn√©es
DB_ENGINE=django.db.backends.postgresql
DB_NAME=csig_db
DB_USER=csig_user
DB_PASSWORD=votre_mot_de_passe
DB_HOST=localhost
DB_PORT=5432

# Redis
REDIS_URL=redis://localhost:6379/0

# Django
SECRET_KEY=votre_secret_key_tr√®s_long_et_complexe
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1

# Email (optionnel)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=votre_email@gmail.com
EMAIL_HOST_PASSWORD=votre_mot_de_passe_app
```

### 7. Migrations et Superutilisateur

```bash
# Appliquer les migrations
python manage.py migrate

# Cr√©er un superutilisateur
python manage.py createsuperuser
```

### 8. Chargement des Donn√©es de Test (Optionnel)

vous pouvez charger le fichier `data.json` :

```bash
python manage.py loaddata data.json
```

## üéØ Lancement du Projet

### 1. D√©marrer Redis

```bash
# Si install√© manuellement
redis-server

# Si avec Docker
docker start redis-csig
```

### 2. D√©marrer Celery (T√¢ches asynchrones)

```bash
# Windows
celery -A jobs worker --loglevel=info --pool=solo

# Linux/Mac
celery -A jobs worker --loglevel=info --pool=solo &
```

### 3. D√©marrer le Serveur Django

```bash
python manage.py runserver
```

Le site sera accessible √† : `http://127.0.0.1:8000/`

## üìÅ Structure du Projet

```
csig/
‚îú‚îÄ‚îÄ csigwebsite/          # Configuration Django principale
‚îú‚îÄ‚îÄ sfront/              # Application frontend public
‚îú‚îÄ‚îÄ content_management/  # Application de gestion de contenu
‚îú‚îÄ‚îÄ users/               # Gestion des utilisateurs
‚îú‚îÄ‚îÄ oauth/               # Authentification OAuth
‚îú‚îÄ‚îÄ jobs/                # Gestion des emplois
‚îú‚îÄ‚îÄ templates/           # Templates HTML
‚îú‚îÄ‚îÄ static/              # Fichiers statiques (CSS, JS, images)
‚îú‚îÄ‚îÄ media/               # Fichiers upload√©s par les utilisateurs
‚îú‚îÄ‚îÄ requirements.txt     # D√©pendances Python
‚îú‚îÄ‚îÄ manage.py           # Script de gestion Django
‚îî‚îÄ‚îÄ README.md           # Ce fichier
```

## üîß Commandes Utiles

### Gestion de la Base de Donn√©es

```bash
# Cr√©er une nouvelle migration
python manage.py makemigrations

# Appliquer les migrations
python manage.py migrate

# Cr√©er un superutilisateur
python manage.py createsuperuser

# Charger des donn√©es
python manage.py loaddata data.json

# Exporter des donn√©es
python manage.py dumpdata > backup.json
```

### Gestion des Fichiers Statiques

```bash
# Collecter les fichiers statiques
python manage.py collectstatic

# Vider le cache
python manage.py clear_cache
```

### Tests

```bash
# Lancer les tests
python manage.py test

# Tests avec couverture
coverage run --source='.' manage.py test
coverage report
```

## üåê Acc√®s aux Interfaces

### Site Public
- **URL** : `http://127.0.0.1:8000/`
- **Pages principales** :
  - Accueil : `/`
  - Programmes : `/programmes/`
  - Projets : `/projets/`
  - √âv√©nements : `/evenements/`
  - √âquipe : `/equipe/`
  - √Ä propos : `/a-propos/`
  - Contact : `/contact/`

### Interface d'Administration
- **URL** : `http://127.0.0.1:8000/oauth/login/`
- **Connexion** : Utilisez le superutilisateur cr√©√©

### Gestion de Contenu
- **URL** : `http://127.0.0.1:8000/content-management/`
- **Connexion** : Utilisez le superutilisateur cr√©√©
- **Fonctionnalit√©s** :
  - Gestion des articles
  - Gestion des programmes
  - Gestion des projets
  - Gestion des √©v√©nements
  - Gestion de l'√©quipe
  - Gestion des partenaires
  - Syst√®me de newsletter
  - R√©servation de salles

## üê≥ Installation avec Docker (Alternative)

### 1. Cr√©er docker-compose.yml

```yaml
version: '3.8'

services:
  db:
    image: postgres:13
    environment:
      POSTGRES_DB: csig_db
      POSTGRES_USER: csig_user
      POSTGRES_PASSWORD: csig_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    environment:
      - DEBUG=1
      - DATABASE_URL=postgres://csig_user:csig_password@db:5432/csig_db
      - REDIS_URL=redis://redis:6379/0

volumes:
  postgres_data:
```

### 2. Cr√©er Dockerfile

```dockerfile
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .

EXPOSE 8000

CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
```

### 3. Lancer avec Docker

```bash
# Construire et d√©marrer
docker-compose up --build

# En arri√®re-plan
docker-compose up -d

# Arr√™ter
docker-compose down
```

## üîç D√©pannage

### Probl√®mes Courants

1. **Erreur de connexion √† la base de donn√©es** :
   - V√©rifiez que PostgreSQL est d√©marr√©
   - V√©rifiez les param√®tres de connexion dans `settings.py`

2. **Erreur Redis** :
   - V√©rifiez que Redis est d√©marr√© : `redis-cli ping`
   - V√©rifiez l'URL Redis dans les settings

3. **Erreur de migrations** :
   ```bash
   python manage.py migrate --fake-initial
   ```

4. **Probl√®me de permissions sur les fichiers** :
   ```bash
   chmod -R 755 media/
   chmod -R 755 static/
   ```

### Logs et Debug

```bash
# Activer le mode debug
DEBUG=True dans settings.py

# Voir les logs Django
python manage.py runserver --verbosity=2

# Logs Celery
celery -A csigwebsite worker --loglevel=debug
```

## üìû Support

Pour toute question ou probl√®me :

1. V√©rifiez d'abord cette documentation
2. Consultez les logs d'erreur
3. V√©rifiez que tous les services sont d√©marr√©s
4. Contactez l'√©quipe de d√©veloppement

## üìù Notes Importantes

- **Production** : Changez `DEBUG=False` et configurez `ALLOWED_HOSTS`
- **S√©curit√©** : Utilisez des mots de passe forts et changez les cl√©s par d√©faut
- **Sauvegarde** : Effectuez des sauvegardes r√©guli√®res de la base de donn√©es
- **Mise √† jour** : Gardez les d√©pendances √† jour pour la s√©curit√©

---

**Bon d√©veloppement ! üöÄ**
